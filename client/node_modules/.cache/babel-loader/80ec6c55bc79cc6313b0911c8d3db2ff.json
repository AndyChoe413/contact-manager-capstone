{"ast":null,"code":"var _jsxFileName = \"/Users/andychoe/Desktop/coding-projects/contact-manager-capstone/client/src/context/contact/ContactState.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from 'react';\nimport axios from 'axios';\nimport ContactContext from './contactContext';\nimport contactReducer from './contactReducer';\nimport { GET_CONTACTS, ADD_CONTACT, DELETE_CONTACT, SET_CURRENT, CLEAR_CURRENT, UPDATE_CONTACT, FILTER_CONTACTS, CLEAR_CONTACTS, CLEAR_FILTER, CONTACT_ERROR } from '../actionTypes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ContactState = props => {\n  _s();\n\n  const initialState = {\n    contacts: [],\n    current: null,\n    filtered: null,\n    error: null\n  };\n  const [state, dispatch] = useReducer(contactReducer, initialState); //get contacts\n\n  const getContacts = async () => {\n    try {\n      const res = await axios.get('api/contacts');\n      dispatch({\n        type: GET_CONTACTS,\n        payload: res.data.contacts\n      });\n    } catch (err) {\n      console.log('err.message: ', err.message);\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: err.message\n      });\n    }\n  }; //add contact\n\n\n  const addContact = async contact => {\n    try {\n      const res = await axios.post('/api/contacts', contact);\n      dispatch({\n        type: ADD_CONTACT,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: err.message\n      });\n    }\n  }; //delete contact \n\n\n  const deleteContact = async id => {\n    try {\n      await axios.delete(`/api/contacts/${id}`);\n      dispatch({\n        type: DELETE_CONTACT,\n        payload: id\n      });\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: err.message\n      });\n    }\n  }; //update\n\n\n  const updateContact = async contact => {\n    try {\n      const res = await axios.put(`/api/contacts/${contact._id}`, contact);\n      dispatch({\n        type: UPDATE_CONTACT,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: err.message\n      });\n    }\n  }; //clear contact\n\n\n  const clearContacts = () => {\n    dispatch({\n      type: CLEAR_CONTACTS\n    });\n  }; //set new\n\n\n  const setCurrent = contact => {\n    dispatch({\n      type: SET_CURRENT,\n      payload: contact\n    });\n  }; //clear contact\n\n\n  const clearCurrent = () => {\n    dispatch({\n      type: CLEAR_CURRENT\n    });\n  }; //filter\n\n\n  const filterContacts = text => {\n    dispatch({\n      type: FILTER_CONTACTS,\n      payload: text\n    });\n  }; //clear filter\n\n\n  const clearFilter = () => {\n    dispatch({\n      type: CLEAR_FILTER\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(ContactContext.Provider, {\n    value: {\n      contacts: state.contacts,\n      current: state.current,\n      filtered: state.filtered,\n      error: state.error,\n      addContact,\n      deleteContact,\n      setCurrent,\n      clearCurrent,\n      updateContact,\n      filterContacts,\n      clearFilter,\n      getContacts,\n      clearContacts\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ContactState, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = ContactState;\nexport default ContactState;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactState\");","map":{"version":3,"sources":["/Users/andychoe/Desktop/coding-projects/contact-manager-capstone/client/src/context/contact/ContactState.js"],"names":["React","useReducer","axios","ContactContext","contactReducer","GET_CONTACTS","ADD_CONTACT","DELETE_CONTACT","SET_CURRENT","CLEAR_CURRENT","UPDATE_CONTACT","FILTER_CONTACTS","CLEAR_CONTACTS","CLEAR_FILTER","CONTACT_ERROR","ContactState","props","initialState","contacts","current","filtered","error","state","dispatch","getContacts","res","get","type","payload","data","err","console","log","message","addContact","contact","post","deleteContact","id","delete","updateContact","put","_id","clearContacts","setCurrent","clearCurrent","filterContacts","text","clearFilter","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react'\nimport axios from 'axios'\nimport ContactContext from './contactContext'\nimport contactReducer from './contactReducer'\nimport {\n    GET_CONTACTS,\n    ADD_CONTACT,\n    DELETE_CONTACT,\n    SET_CURRENT,\n    CLEAR_CURRENT,\n    UPDATE_CONTACT,\n    FILTER_CONTACTS,\n    CLEAR_CONTACTS,\n    CLEAR_FILTER,\n    CONTACT_ERROR\n} from '../actionTypes'\n\n\nconst ContactState = props => {\n    const initialState = {\n        contacts: [],\n        current: null,\n        filtered: null,\n        error: null\n    };\n\n    const [state, dispatch] = useReducer(contactReducer, initialState)\n\n    //get contacts\n    const getContacts = async () => {\n       \n        try {\n            const res = await axios.get('api/contacts')\n\n            dispatch({\n                type: GET_CONTACTS,\n                payload: res.data.contacts\n            })\n\n        } catch (err) {\n            console.log('err.message: ', err.message)\n            dispatch({\n                type: CONTACT_ERROR,\n                payload: err.message,\n            })\n        }\n   }\n\n\n    //add contact\n    const addContact = async contact => {\n\n        try {\n            const res = await axios.post('/api/contacts', contact)\n\n            dispatch({\n                type: ADD_CONTACT,\n                payload: res.data\n            })\n\n        } catch (err) {\n\n            dispatch({\n                type: CONTACT_ERROR,\n                payload: err.message\n            })\n        }\n    }\n\n    //delete contact \n    const deleteContact = async id => {\n          try {\n             await axios.delete(`/api/contacts/${id}`)\n\n              dispatch({\n                  type: DELETE_CONTACT,\n                  payload: id\n              })\n\n        } catch (err) {\n\n            dispatch({\n                type: CONTACT_ERROR,\n                payload: err.message\n            })\n        }\n     \n    }\n    \n    //update\n    const updateContact = async contact => {\n        try {\n            const res = await axios.put(`/api/contacts/${contact._id}`, contact)\n\n            dispatch({\n                type: UPDATE_CONTACT,\n                payload: res.data\n            })\n\n        } catch (err) {\n\n            dispatch({\n                type: CONTACT_ERROR,\n                payload: err.message\n            })\n        }\n    }\n    \n    //clear contact\n    const clearContacts = () => {\n        dispatch({type: CLEAR_CONTACTS})\n    }\n\n    //set new\n     const setCurrent = contact => {\n        dispatch({type: SET_CURRENT, payload: contact})\n    }\n\n    //clear contact\n    const clearCurrent = () => {\n        dispatch({type: CLEAR_CURRENT})\n    }\n\n\n    //filter\n    const filterContacts = text => {\n        dispatch({type: FILTER_CONTACTS, payload: text})\n    }\n\n    //clear filter\n    const clearFilter = () => {\n        dispatch({type: CLEAR_FILTER})\n    }\n\n\n    return (\n        <ContactContext.Provider\n            value={{\n                contacts: state.contacts,\n                current: state.current,\n                filtered: state.filtered,\n                error: state.error,\n                addContact,\n                deleteContact,\n                setCurrent,\n                clearCurrent,\n                updateContact,\n                filterContacts,\n                clearFilter,\n                getContacts,\n                clearContacts\n        }}\n        >\n            {props.children}\n        </ContactContext.Provider>\n    )\n}\n\nexport default ContactState"]},"metadata":{},"sourceType":"module"}